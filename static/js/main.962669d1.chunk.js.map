{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","visitedCountries","setVisitedCountries","_useState3","_useState4","countryInput","setCountryInput","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","countriesList","setCountriesList","useEffect","fetch","then","response","json","myJson","react_default","a","createElement","className","action","onSubmit","event","countryName","preventDefault","includes","concat","toConsumableArray","find","country","name","type","value","list","onChange","target","id","map","key","alpha2Code","index_esm","chartType","data","index","newCountry","push","width","height","legendToggle","options","backgroundColor","datalessRegionColor","defaultColor","src","flag","alt","onClick","countryCode","newVisitedCountries","filter","visitedCountry","removeCountry","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.962669d1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nconst App = () => {\n  const [visitedCountries, setVisitedCountries] = useState([]);\n  const [countryInput, setCountryInput] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [countriesList, setCountriesList] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://restcountries.eu/rest/v2/all?fields=name;alpha2Code;flag\")\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(myJson) {\n        setCountriesList(myJson);\n      });\n  }, []);\n\n  function getCountryData(countryName) {\n    return countriesList.find(country => country.name === countryName);\n  }\n\n  function addCountry(event) {\n    event.preventDefault();\n\n    if (visitedCountries.includes(countryInput)) {\n      setErrorMessage(`You've already added ${countryInput} to the list!`);\n    } else {\n      setErrorMessage(null);\n      setVisitedCountries([...visitedCountries, getCountryData(countryInput)]);\n    }\n\n    setCountryInput(\"\");\n  }\n\n  function removeCountry(countryCode) {\n    const newVisitedCountries = visitedCountries.filter(visitedCountry => {\n      return visitedCountry.alpha2Code !== countryCode;\n    });\n\n    setVisitedCountries(newVisitedCountries);\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <form action=\"\" onSubmit={addCountry}>\n          <input\n            type=\"text\"\n            value={countryInput}\n            list=\"countries\"\n            onChange={event => setCountryInput(event.target.value)}\n          />\n          <datalist id=\"countries\">\n            {countriesList.map(country => (\n              <option\n                key={`datalist-country-${country.alpha2Code}`}\n                value={country.name}\n              />\n            ))}\n          </datalist>\n          <button type=\"submit\">Add country</button>\n          {errorMessage && <p>{errorMessage}</p>}\n        </form>\n      </div>\n      <div>\n        <Chart\n          chartType=\"GeoChart\"\n          data={[\n            [\"Country\"],\n            ...visitedCountries.map((country, index) => {\n              let newCountry = [];\n              newCountry.push(country.alpha2Code);\n\n              return newCountry;\n            })\n          ]}\n          width=\"100%\"\n          height=\"720\"\n          legendToggle\n          options={{\n            backgroundColor: \"#81d4fa\",\n            datalessRegionColor: \"white\",\n            defaultColor: \"#095aff\"\n          }}\n        />\n      </div>\n      <div>\n        <ul>\n          {visitedCountries.map(country => (\n            <li key={country.alpha2Code}>\n              <img src={country.flag} alt=\"\" width=\"24\" height=\"16\" />\n              {country.name}{\" \"}\n              <button onClick={() => removeCountry(country.alpha2Code)}>\n                Remove country\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}